// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using Live5.Xps.Framework;
using Live5.Xps.Framework.Model;
using Live5.Xps.ArticleComponent;
using Live5.Xps.Framework.Utils;
using System.IO;
using System.Reflection;
using System.Xml;
namespace Live5.Xps.Framework.UnitTest
{
    /// <summary>
    ///This is a test class for Live5.Xps.Framework.PublishService and is intended
    ///to contain all Live5.Xps.Framework.PublishService Unit Tests
    ///</summary>
    [TestClass()]
    public class PublishServiceTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:

        //Use ClassInitialize to run code before running the first test in the class

        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
            Tool.CopyAddIn(testContext);
            // string s = Assembly.GetExecutingAssembly().CodeBase;

            // for (int i = 0; i < 4; i++)
            // {
            //     int j = s.LastIndexOf("/");
            //     s = s.Substring(0, j);
            // }
            // s = s.Substring(8);

            // string addInPath = Path.GetDirectoryName(s) + @"\bin\debug\Addin";
            // //string addInPath = @"F:\XpsProject\Bin\Debug\AddIn\";
            // xDirectory xDir = new xDirectory();
            // DirectoryInfo dir = new DirectoryInfo(addInPath);

            // Directory.CreateDirectory(testContext.TestDeploymentDir + @"\AddIn\");
            // FileInfo[] files = dir.GetFiles();
            // foreach (FileInfo var in files)
            // {
            //     var.CopyTo(testContext.TestDeploymentDir + @"\AddIn\"+var.Name);
            // }
            //xDir.StartCopy(addInPath, testContext.TestDeploymentDir);

        }

        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for PutEntry (IEntry)
        ///</summary>
        [TestMethod()]
        public void PutEntryTest()
        {
            PublishService target = new PublishService();

            IEntry entry = new Article(); // TODO: Initialize to an appropriate value
            //entry.Content = "article1";
            entry.Summary = "summ";
            entry.EntryId = Guid.NewGuid();
            entry.Updated = DateTime.Now;
            bool expected = true;
            bool actual;

            actual = target.PutEntry(entry);

            Assert.AreEqual(expected, actual, "Live5.Xps.Framework.PublishService.PutEntry did not return the expected value.");

        }


        /// <summary>
        ///A test for GetXmlEntry (string)
        ///</summary>
        [TestMethod()]
        public void GetXmlEntryTest()
        {
            PublishService target = new PublishService();

            string entryUri = "FAF46DBD-5D8D-4FCF-9C03-26EAA9C76D51"; // TODO: Initialize to an appropriate value

        
            XmlDocument actual;

            actual = target.GetXmlEntry(entryUri);

            Assert.IsNotNull(actual);
        }
    }


}
