using System;
using System.Collections.Generic;
using System.Text;

namespace Live5.Xps.Framework.Atom
{
    class AtomConstants
    {
        
        internal const string GeneratorName = "Atom.NET";
        internal static readonly Uri GeneratorUri = new Uri("http://atomnet.sourceforge.net");
        internal const string GeneratorMessage = "Generated by Atom.NET";
        internal static readonly string GeneratorVersion = Utils.GetVersion();

        internal const string AtomVersion = "1.0";
        internal const string AtomNSPrefix = "atom";
        internal static readonly Uri AtomNSUri = new Uri("http://www.w3.org/2005/Atom");

        internal const string DCNSPrefix = "dc";
        internal static readonly Uri DCNSUri = new Uri("http://purl.org/dc/elements/1.1/");

        private readonly static MimeType atomMediaType = MimeType.ApplicationAtomXml;
        /// <summary>
        /// The media type of Atom xml format.
        /// </summary>
        public static MimeType AtomMediaType
        {
            get
            {
                return atomMediaType;
            }
        }

        /// <summary>
        /// The default language of the feed.
        /// </summary>
        public static LanguageTag DefaultLanguage
        {
            get
            {
                return LanguageTag.UnknownLanguage;
            }
        }


        /// <summary>
        /// The default value for int values.
        /// </summary>
        public const int Int = -1;

        /// <summary>
        /// The default media type.
        /// It defaults to "text/plain".
        /// </summary>
        public static MimeType DefaultMediaType
        {
            get
            {
                return MimeType.Text;
            }
        }

        public static TextConstructType DefaultTextType
        {
            get { return TextConstructType.PlainText; }
      
        }


        private readonly static Mode mode = Mode.InlineTextContent;
        /// <summary>
        /// The default encoding mode for the contents.
        /// 
        /// <list type="bullet">
        /// <item>
        ///		<term>xml</term>
        ///		<description>The content is inline xml.</description>
        /// </item>
        /// <item>
        ///		<term>escaped</term>
        ///		<description>The content is an escaped string.</description>
        /// </item>
        /// <item>
        ///		<term>base64</term>
        ///		<description>The content is base64 encoded.</description>
        /// </item>
        /// </list>
        /// 
        /// Processors must decode the element's content before considering it as content of the the indicated media type.  
        /// It defaults to "xml".
        /// </summary>
        public static Mode Mode
        {
            get
            {
                return mode;
            }
        }


        /// <summary>
        /// The default relationship for the links.
        /// 
        /// <list type="bullet">
        /// <item>
        ///		<term>alternate</term>
        ///		<description>The URI in the href attribute points to an alternate representation of the containing resource.</description>
        /// </item>
        /// <item>
        ///		<term>start</term>
        ///		<description>The Atom feed at the URI supplied in the href attribute contains the first feed in a linear sequence of entries.</description>
        /// </item>
        /// <item>
        ///		<term>next</term>
        ///		<description>The Atom feed at the URI supplied in the href attribute contains the next N entries in a linear sequence of entries.</description>
        /// </item>
        /// <item>
        ///		<term>prev</term>
        ///		<description> The Atom feed at the URI supplied in the href attribute contains the previous N entries in a linear sequence of entries.</description>
        /// </item>
        /// <item>
        ///		<term>service.edit</term>
        ///		<description>The URI given in the href attribute is used to edit a representation of the referred resource.</description>
        /// </item>
        /// <item>
        ///		<term>service.post</term>
        ///		<description>The URI in the href attribute is used to create new resources.</description>
        /// </item>
        /// <item>
        ///		<term>service.feed</term>
        ///		<description>The URI given in the href attribute is a starting point for navigating content and services.</description>
        /// </item>
        /// </list>
        ///		
        ///	It defaults to "alternate".
        /// </summary>
        public const Relationship DefaultRel = Relationship.Alternate;

        private readonly static DateTime dateTime = DateTime.MinValue;
        /// <summary>
        /// The default date/time.
        /// </summary>
        public static DateTime DateTime
        {
            get
            {
                return dateTime;
            }
        }


        private readonly static TimeSpan utcOffset = TimeSpan.MinValue;
        /// <summary>
        /// The default UTC offset.
        /// </summary>
        public static TimeSpan UtcOffset
        {
            get
            {
                return utcOffset;
            }
        }


        private readonly static Encoding encoding = Encoding.UTF8;
        /// <summary>
        /// The default encoding.
        /// </summary>
        public static Encoding Encoding
        {
            get
            {
                return encoding;
            }
        }

        //----------------New -----------
        internal const string NameSpace = "http://www.w3.org/2005/Atom";
        internal readonly static Uri DefaultUri =new Uri("http://www.live-5.com");

        public static MimeType GetContentType(string serviceType)
        {
            MimeType mediaType;
            switch (serviceType)
            {
                case "Live5.Xps.ArticleComponent.ArticleService":
                    mediaType = MimeType.Xhtml;
                    break;
                case "Live5.Xps.Framework.BuiltIn.BuiltInService":
                    mediaType = MimeType.Text;
                    break;
                case "Live5.Xps.VideoComponent.VideoService":
                    mediaType = MimeType.VideoFlv;
                    break;
                default:
                    mediaType = MimeType.Text;
                    break;
            }
            return mediaType;
        }
        public static Mode GetContentMode(string serviceType)
        {
            Mode mode;
            switch (serviceType)
            {
                case "Live5.Xps.ArticleComponent.ArticleService":
                    mode = Mode.InlineXhtmlContent;
                    break;
                case "Live5.Xps.Framework.BuiltIn.BuiltInService":
                    mode = Mode.InlineTextContent;
                    break;
                case "Live5.Xps.Framework.External.ExternalService":
                    mode=Mode.OutOfLineContent;
                    break;
                case "Live5.Xps.MediaComponent.MediaService":
                    mode = Mode.OutOfLineContent;
                    break;
                default:
                    mode = Mode.InlineTextContent;
                    break;
            }
            return mode;
        }
        #region Atom Elements Local Names.
        
        internal const string Feed = "feed";
        internal const string Entry = "entry";
        internal const string Author = "author";
        internal const string Name = "name";
        internal const string Uri = "uri";
        internal const string Email = "email";
        internal const string Id = "id";
        internal const string Title = "title";
        internal const string Rights = "rights";
        internal const string Updated = "updated";
        internal const string Published = "published";
        internal const string Content = "content";
        internal const string Summary = "summary";
        internal const string Href = "href";
        internal const string Rel = "rel";
        internal const string Type = "type";
        internal const string HrefLang = "hreflang";
        internal const string Length = "length";
        internal const string Link = "link";
        internal const string Language = "language";
        #endregion
    }
}
